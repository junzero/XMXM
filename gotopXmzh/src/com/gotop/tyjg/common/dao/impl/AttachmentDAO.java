package com.gotop.tyjg.common.dao.impl;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;

import org.apache.log4j.Logger;

import com.eos.foundation.common.utils.FileUtil;
import com.eos.server.dict.DictManager;
import com.gotop.tyjg.common.dao.IAttachmentDAO;
import com.gotop.tyjg.stable.model.AtFileupload;
import com.gotop.util.dataSource.SqlMapClientDao;
import com.gotop.util.security.ForUtil;
import com.primeton.utils.Page;


public class AttachmentDAO extends SqlMapClientDao implements IAttachmentDAO {
    /**
	 * @abatorgenerated
	 */
	protected Logger log = Logger.getLogger(AttachmentDAO.class);


	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table Attachment
	 * @abatorgenerated  
	 */
	public AttachmentDAO() {
		super();
	}
	private  String DIRPATH; // 文件物理路径

	private int length = 2097152; // 缓存大小
	
	
	private String getDIRPATH() {
		this.DIRPATH = getFileDatePath();
		return this.DIRPATH;
	}
/**
 * 返回上传文件路径
 */
	public String getFileDatePath(String src_cd) {

		String relPath = "";

		List object = this.queryForList(
				"Attachment_SqlMap.select_dic_path", src_cd);
		if (object == null || object.size() == 0) {
			relPath += File.separator + "unknow";
		} else {
			HashMap _hashMap = (HashMap) object.get(0);
			relPath += _hashMap.get("DICTNAME");
		}
		return relPath;

	}
	/**
	 * 返回上传文件路径
	 */
	public String getFileDatePath() {
//		DictType dictType = DictManager.getDictType("ABF_FILE_PATH");
//		DictEntry dictEntry = DictManager.getDictEntry(dictType, "0000");
//		return dictEntry.getDictName();
		
		String dName = DictManager.getDictName("ABF_FILE_PATH", "0000");
		return dName;
	}


	private String getFileDateName(String fileName, boolean changeName) {

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
		Calendar calendar = Calendar.getInstance();
		String fileDateName = "";

		if (changeName) {
			fileDateName = Calendar.getInstance().get(Calendar.YEAR)
					+ File.separator
					+ simpleDateFormat.format(calendar.getTime()) + "_"
					+ fileName;
		} else {
			fileDateName = Calendar.getInstance().get(Calendar.YEAR)
					+ File.separator + fileName;
		}

		return fileDateName;

	}

	/**
	 * 获取附件限制
	 * 
	 * @param src_cd
	 *            附件来源
	 * @return HashMap HashMap/MAXNUM<String> 最大数量 HashMap/MAXSIZE<String>
	 *         最大空间
	 */

	public HashMap getAttachmentLimit(String src_cd) {
		HashMap resultMap = new HashMap();

		List object = this.queryForList(
				"Attachment_SqlMap.select_attachmentlimit", src_cd);

		if (object.size() > 0) {
			String DICTNAME = (String) ((HashMap) object.get(0)).get("DICTNAME");
			String maxnum = DICTNAME.split(",")[0];
			long maxsize = Long.parseLong(DICTNAME.split(",")[1]);
			maxsize = maxsize * 1024 * 1024;
			resultMap.put("MAXNUM", maxnum);
			resultMap.put("MAXSIZE", String.valueOf(maxsize));
		}
		return resultMap;
	}
	/**
	 * 文件上传
	 * 
	 * @param src_id
	 *            来源ID
	 * @param src_cd
	 *            来源代码
	 * @param fileName
	 *            文件名
	 * @param inputStream
	 *            文件流
	 * @return HashMap/isSucc 是否成功; HashMap/msg 结果信息; HashMap/file 返回文件对象
	 * @throws IOException
	 */

	public HashMap uploadAttachment(String src_id, String src_cd,
			String fileName, InputStream inputStream) throws IOException {

		// 结果
		HashMap resultMap = new HashMap();
		resultMap.put("isSucc", true);
		resultMap.put("msg", "操作成功");
		long fileSize = 0;

		String fileDatePath = this.getFileDatePath(src_cd);

		String fileDateName = this.getFileDateName(fileName, true);

		String path = this.getDIRPATH()+fileDatePath + File.separator
				+ fileDateName;

		// 新建文件
		File file = ForUtil.createFile(path);

		// 文件拷贝
		FileOutputStream fileOutputStream = null;
		try{
			fileOutputStream =ForUtil.createFileOutputStream(file);
			byte[] buffer = new byte[length];
			while (inputStream.read(buffer) != -1) {
				fileOutputStream.write(buffer);
				fileOutputStream.flush();
			}
			fileSize = file.length();
			inputStream.close();
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			if(fileOutputStream!=null){
				fileOutputStream.close();
			}
		}
		// 文件入库
		if (!(insertAttachmentData(src_id, src_cd, fileName, fileDateName,
				fileSize))) {
			resultMap.put("isSucc", false);
			resultMap.put("msg", "文件入库失败");
			file.delete();
		} else {
			resultMap.put("file", file);
		}

		return resultMap;
	}
	/**
	 * 文件上传
	 * 
	 * @param src_id
	 * @param src_cd
	 * @param uploadfileFileName  文件名LIST
	 * @param uploadfile文件LIST
	 * @return HashMap/isSucc 是否成功; HashMap/msg 结果信息; HashMap/file<File[]>
	 *         返回文件对象
	 * @throws IOException
	 */

	public HashMap uploadAttachment(String src_id, String src_cd,List<String> uploadfileFileName,
			 List<File> uploadfile) throws IOException {

		// 结果
		HashMap resultMap = new HashMap();
		resultMap.put("isSucc", true);
		resultMap.put("msg", "操作成功");
		
		File file=null;
		for (int i = 0; i < uploadfile.size(); i++) {
			file=uploadfile.get(i);
			if(file!=null)
			{

				String fileDatePath = this.getFileDatePath(src_cd);
	
				String fileDateName = this.getFileDateName(uploadfileFileName.get(i), true);
				String path = this.getDIRPATH()+fileDatePath + File.separator
						+ fileDateName;  
	
				long fileSize = file.length();
				FileUtil.copyFile(file.getPath(), path);
				// 文件入库
				if (!(insertAttachmentData(src_id, src_cd, uploadfileFileName.get(i), fileDateName, fileSize))) {
					resultMap.put("isSucc", false);
					resultMap.put("msg", "文件入库失败");
					
					ForUtil.createFile(path).delete();
				} else {
					resultMap.put("fileDateName", uploadfileFileName.get(i));
					
				}
			}
		}

		return resultMap;

	}
	
	/**
	 * 文件上传
	 * 
	 * @param src_id
	 * @param src_cd
	 * @param uploadfileFileName  文件名LIST
	 * @param uploadfile文件LIST
	 * @param attchementStatus 附件状态
	 * @return HashMap/isSucc 是否成功; HashMap/msg 结果信息; HashMap/file<File[]>
	 *         返回文件对象
	 * @throws IOException
	 */

	public HashMap uploadAttachment(String src_id, String src_cd,List<String> uploadfileFileName,
			 List<File> uploadfile,String attchementStatus) throws IOException {
		// 结果
		HashMap resultMap = new HashMap();
		resultMap.put("isSucc", true);
		resultMap.put("msg", "操作成功");
		File file=null;
		for (int i = 0; i < uploadfile.size(); i++) {
			file=uploadfile.get(i);
			if(file!=null) {
				String fileDatePath = this.getFileDatePath(src_cd);
				String fileDateName = this.getFileDateName(uploadfileFileName.get(i), true);
				String path = this.getDIRPATH()+fileDatePath + File.separator
						+ fileDateName;  
				long fileSize = file.length();
				FileUtil.copyFile(file.getPath(), path);
				// 文件入库
				if (!(insertAttachmentData(src_id, src_cd, uploadfileFileName.get(i), fileDateName, fileSize,attchementStatus))) {
					resultMap.put("isSucc", false);
					resultMap.put("msg", "文件入库失败");
					ForUtil.createFile(path).delete();
				} else {
					resultMap.put("fileDateName", uploadfileFileName.get(i));
				}
			}
		}
		return resultMap;
	}
	/**
	 * 文件上传,不保存数据库记录
	 * 
	 * @param src_id
	 * @param src_cd
	 * @param uploadfileFileName  文件名LIST
	 * @param uploadfile文件LIST
	 * @return HashMap/isSucc 是否成功; HashMap/msg 结果信息; HashMap/fileList （ HashMap<String,String> realName，path，fileSize）
	 *         返回文件对象
	 * @throws IOException
	 */

	public HashMap uploadAttachmentWithOutDB(String src_cd,List<String> uploadfileFileName,
			 List<File> uploadfile) throws IOException {

		// 结果
		HashMap resultMap = new HashMap();
		resultMap.put("isSucc", true);
		resultMap.put("msg", "操作成功");
		List<HashMap> fileList=new ArrayList<HashMap>();
		File file=null;
		HashMap<String,String> fileInfo=null;
		for (int i = 0; i < uploadfile.size(); i++) {
			file=uploadfile.get(i);
			if(file!=null)
			{
				fileInfo=new HashMap<String, String>();
				String fileDatePath = this.getFileDatePath(src_cd);
	
				String fileDateName = this.getFileDateName(uploadfileFileName.get(i), true);
				String path = this.getDIRPATH()+fileDatePath + File.separator + fileDateName;
				long fileSize = file.length();
				FileUtil.copyFile(file.getPath(), path);
				fileDateName = fileDateName.replace("\\", "/");
				fileInfo.put("realName", uploadfileFileName.get(i));
				fileInfo.put("path", fileDateName);
				fileInfo.put("fileSize", fileSize+"");
				
				fileList.add(fileInfo);
			}
		}
		resultMap.put("fileList",fileList);
		return resultMap;

	}
	/**
	 *  获取附件放在业务字典中的全路径，共删除附件使用
	 * @param path 文件路径
	 * @param src_cd 功能模块编号
	 * @return 文件在服务器的全路径
	 * @ throws SQLException
	 */
	public String returnAttachementAllPath(String path,String src_cd)  throws SQLException{
		return this.getDIRPATH()+ this.getFileDatePath(src_cd)+"/" + path;
	}
	
	/**
	 * 文件入库
	 * 
	 * @param src_id
	 * @param src_cd
	 * @param fileName
	 * @param filePath
	 * @param fileSize
	 * @return
	 */
	public boolean insertAttachmentData(String src_id, String src_cd,
			String fileName, String filePath, long fileSize) {

		HashMap parameterMap = new HashMap();
		parameterMap.put("ATTACHMENT_NAME", fileName);
		parameterMap.put("STORAGE_PATH", filePath);
		parameterMap.put("SPACE_SIZE", fileSize);
		parameterMap.put("ATTACHMENT_SRC_CD", src_cd);
		parameterMap.put("ATTACHMENT_SRC_ID", src_id);
		this.insert(
				"Attachment_SqlMap.insert_attachmentinfo",
				parameterMap);

		return true;
	}
	/**
	 * 文件入库
	 * 
	 * @param src_id
	 * @param src_cd
	 * @param fileName
	 * @param filePath
	 * @param fileSize
	 * @return
	 */
	public boolean insertAttachmentData(String src_id, String src_cd,
			String fileName, String filePath, long fileSize,String attachmentStatus) {

		HashMap parameterMap = new HashMap();
		parameterMap.put("ATTACHMENT_NAME", fileName);
		parameterMap.put("STORAGE_PATH", filePath);
		parameterMap.put("SPACE_SIZE", fileSize);
		parameterMap.put("ATTACHMENT_SRC_CD", src_cd);
		parameterMap.put("ATTACHMENT_SRC_ID", src_id);
		parameterMap.put("attachmentStatus", attachmentStatus);
		this.insert(
				"Attachment_SqlMap.insert_attachmentinfo_status",
				parameterMap);

		return true;
	}

	/**
	 * 获取附件数据流
	 * 
	 * @param id
	 *            文件ID
	 * @return HashMap/isSucc 是否成功; HashMap/msg 结果信息; HashMap/fileName 文件名;
	 *         HashMap/outputStream文件流;
	 * @throws FileNotFoundException
	 */

	public HashMap downloadAttachment(String id) throws FileNotFoundException {

		HashMap resultMap = new HashMap();
		resultMap.put("isSucc", true);
		resultMap.put("msg", "操作成功");

		HashMap dataMap = null;
		dataMap = this.selectAttachmentData(id);

		if (dataMap == null) {
			resultMap.put("isSucc", false);
			resultMap.put("msg", "无此记录");
			return resultMap;
		}

		String attachment_name = (String) dataMap.get("ATTACHMENT_NAME");
		String pPath = this.getDIRPATH()+(String) dataMap.get("STORAGE_PATH");
		OutputStream outputStream = null;
		outputStream = (OutputStream) ForUtil.createFileOutputStream(ForUtil.createFile(pPath));

		resultMap.put("fileName", attachment_name);
		resultMap.put("outputStream", outputStream);
		return resultMap;
	}

	public HashMap downloadAttachmentInweb(String id) {

		HashMap resultMap = new HashMap();
		resultMap.put("isSucc", true);
		resultMap.put("msg", "操作成功");

		HashMap dataMap = null;
		dataMap = this.selectAttachmentDataDictPath(id);

		if (dataMap == null) {
			resultMap.put("isSucc", false);
			resultMap.put("msg", "无此记录");
			return resultMap;
		}

		String attachment_name = (String) dataMap.get("ATTACHMENT_NAME");
		String pPath = this.getDIRPATH()+(String) dataMap.get("DICTPATH")
				+ File.separator + (String) dataMap.get("STORAGE_PATH");
		resultMap.put("fileName", attachment_name);
		resultMap.put("filePath", pPath);
		return resultMap;

	}

	/**
	 * 获取附件数据
	 * 
	 * @param id
	 *            文件ID
	 * @return
	 */
	private HashMap selectAttachmentData(String id) {
		List object = this.queryForList(
				"Attachment_SqlMap.select_attachmentinfo", id);

		if (object == null || object.size() == 0) {
			return null;
		}
		HashMap dataMap = (HashMap) object.get(0);
		return dataMap;
	}

	private HashMap selectAttachmentDataDictPath(String id) {
		List object = this.queryForList(
				"Attachment_SqlMap.select_attachmentinfodictpath",
				id);

		if (object == null || object.size() == 0) {
			return null;
		}
		HashMap dataMap = (HashMap) object.get(0);
		return dataMap;
	}

	/**
	 * 获取附件列表
	 * 
	 * @param src_id
	 * @param src_cd
	 * @return list(hashMap) -> ATTACHMENT_INFO_ID, ATTACHMENT_NAME,
	 *         SPACE_SIZE,STORAGE_PATH, CREATE_TIME, UPDATE_TIME
	 */

	public List getAttachmentList(String src_id, String src_cd) {
		List list = new ArrayList();
		HashMap parameterMap = new HashMap();
		parameterMap.put("ATTACHMENT_SRC_ID", src_id);
		parameterMap.put("ATTACHMENT_SRC_CD", src_cd);
		List object = this.queryForList(
				"Attachment_SqlMap.select_attachmentlist",
				parameterMap);

		for (int i = 0; i < object.size(); i++) {
			list.add(object.get(i));
		}
		return list;
	}

	/**
	 * 删除一条附件记录
	 * 
	 * @param id
	 * @return HashMap/isSucc 是否成功; HashMap/msg 结果信息;
	 */

	public HashMap delAttachmentInfo(String id) {
		HashMap resultMap = new HashMap();
		resultMap.put("isSucc", true);
		resultMap.put("msg", "操作成功");
		this.delete("Attachment_SqlMap.del_attachmentinfo", id);

		return resultMap;
	}

	/**
	 * 删除业务逻辑记录关联的所有附件
	 * 
	 * @param src_id
	 * @param src_cd
	 * @return HashMap/isSucc 是否成功; HashMap/msg 结果信息;
	 */

	public HashMap delAttachmentList(String src_id, String src_cd) {
		HashMap resultMap = new HashMap();
		resultMap.put("isSucc", true);
		resultMap.put("msg", "操作成功");

		HashMap parameterMap = new HashMap();
		parameterMap.put("ATTACHMENT_SRC_ID", src_id);
		parameterMap.put("ATTACHMENT_SRC_CD", src_cd);

		this.delete(
						"Attachment_SqlMap.del_attachmentlist",
						parameterMap);

		return resultMap;

	}

	/**
	 * 删除业务逻辑记录关联的所有附件
	 * 
	 * @param src_idList
	 *            List<String> 记录ID列表
	 * @param src_cd
	 * @return HashMap/isSucc 是否成功; HashMap/msg 结果信息;
	 */

	public HashMap delAttachmentList(List<String> src_idList, String src_cd) {
		HashMap resultMap = new HashMap();
		resultMap.put("isSucc", true);
		resultMap.put("msg", "操作成功");

		HashMap parameterMap = new HashMap();
		StringBuffer src_ids = new StringBuffer();

		for (int i = 0; i < src_idList.size(); i++) {
			src_ids.append(",");
			src_ids.append(src_idList.get(i));
		}

		if (src_ids.length() > 0) {
			src_ids = src_ids.deleteCharAt(0);
		} else {
			src_ids.append("");
		}

		parameterMap.put("ATTACHMENT_SRC_IDS", src_ids.toString());
		parameterMap.put("ATTACHMENT_SRC_CD", src_cd);

		this.delete(
				"Attachment_SqlMap.del_attachmentinfos",
				parameterMap);

		return resultMap;
	}

	/**
	 * 移动文件
	 * 
	 * @param id
	 *            文件ID
	 * @param src_id
	 *            来源ID
	 * @param src_cd
	 *            来源代码
	 * @return HashMap/isSucc 是否成功; HashMap/msg 结果信息;
	 */

	public HashMap moveAttachmentInfo(String id, String src_id, String src_cd) {
		HashMap resultMap = new HashMap();
		resultMap.put("isSucc", true);
		resultMap.put("msg", "操作成功");

		HashMap parameterMap = new HashMap();
		parameterMap.put("ATTACHMENT_INFO_ID", id);
		parameterMap.put("ATTACHMENT_SRC_ID", src_id);
		parameterMap.put("ATTACHMENT_SRC_CD", src_cd);

		this.update(
				"Attachment_SqlMap.move_attachmentinfo",
				parameterMap);
		return resultMap;
	}

	/**
	 * 附件拷贝
	 * 
	 * @param arrachment_id
	 * @param src_id
	 * @return
	 */

	public HashMap copyAttachmentInfo(List<String> arrachment_id, String src_id) {
		HashMap resultMap = new HashMap();
		resultMap.put("isSucc", true);
		resultMap.put("msg", "操作成功");

		StringBuffer attachment_ids = new StringBuffer();

		for (int i = 0; i < arrachment_id.size(); i++) {
			attachment_ids.append(",");
			attachment_ids.append(arrachment_id.get(i));
		}

		if (attachment_ids.length() > 0) {
			attachment_ids = attachment_ids.deleteCharAt(0);
		}

		HashMap parameterMap = new HashMap();
		parameterMap.put("ATTACHMENT_SRC_ID", src_id);
		parameterMap.put("ATTACHMENT_INFO_IDS", attachment_ids.toString());

		this.update(
				"Attachment_SqlMap.copy_attachmentinfos",
				parameterMap);

		return resultMap;
	}
	public static void main(String[] args) {

	File file = ForUtil.createFile("D:\\Seq_tyjg.sql");
	FileUtil.copyFile("D:\\Seq_tyjg.sql", "D:\\Seq_tyjg2.sql2");
	
	}
	/**
	 * 查询所有上传列表，查询分页数据
	 * @abatorgenerated
	 */
	public List queryWithDBBeanByMapAndPage(HashMap map, Page page) {
		List list = queryForList(
				"Attachment_SqlMap.queryWithDBBeanByMapAndPage", map, page);
		return list;
	}
	/**
	 * 通过实例查询相关记录
	 * @param atFileupload
	 * @return
	 * @throws Exception
	 */
	public List queryWithDB(AtFileupload atFileupload) throws Exception{
		List list = queryForList("Attachment_SqlMap.atFileupload_SelectByMap", atFileupload);
		return list;
	}
	/**
	 * 按组查询所有相关数据
	 * @param HashMap  String fileIds,String relationId,String groupId
	 * @return
	 * @throws Exception
	 */
	public List<com.gotop.tyjg.stable.model.AtFileupload> queryWithDBByGroup(HashMap<String,String> param) throws Exception{
		List<com.gotop.tyjg.stable.model.AtFileupload> list = queryForList("Attachment_SqlMap.atFileupload_withDBByGroup", param);
		return list;
	}
	/**
	 * 删除上个月未确认的附件数据
	 * @param hashMapParam
	 * @return
	 */
	public int deleteWithDBByNotEffective(){
		int rows = this.delete("Attachment_SqlMap.atFileupload_deleteNotEffective");
		return rows;
	}
	
}