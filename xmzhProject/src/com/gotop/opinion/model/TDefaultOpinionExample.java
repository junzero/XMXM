package com.gotop.opinion.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.log4j.Logger;

public class TDefaultOpinionExample {
    /**
	 * @abatorgenerated
	 */
	protected Logger log = Logger.getLogger(TDefaultOpinionExample.class);
	/**
	 * 排序字段.
	 * @abatorgenerated
	 */
	protected String orderByClause;
	/**
	 * sql条件.
	 * @abatorgenerated
	 */
	protected List oredCriteria;
	/**
	 * 分页查询的起始行数.
	 * @abatorgenerated
	 */
	private Integer oracleStart;
	/**
	 * 分页查询结束行数.
	 * @abatorgenerated
	 */
	private Integer oracleEnd;

	/**
	 * * @abatorgenerated  
	 */
	public TDefaultOpinionExample() {
		oredCriteria = new ArrayList();
	}

	/**
	 * * @abatorgenerated  
	 */
	protected TDefaultOpinionExample(TDefaultOpinionExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
		this.oracleStart = example.oracleStart;
		this.oracleEnd = example.oracleEnd;
	}

	/**
	 * * @abatorgenerated  
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * * @abatorgenerated  
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * * @abatorgenerated  
	 */
	public List getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * * @abatorgenerated  
	 */
	public Integer getOracleStart() {
		return oracleStart;
	}

	/**
	 * * @abatorgenerated  
	 */
	public void setOracleStart(Integer oracleStart) {
		this.oracleStart = oracleStart;
	}

	/**
	 * * @abatorgenerated  
	 */
	public Integer getOracleEnd() {
		return oracleEnd;
	}

	/**
	 * * @abatorgenerated  
	 */
	public void setOracleEnd(Integer oracleEnd) {
		this.oracleEnd = oracleEnd;
	}

	/**
	 * 增加整个新查询条件(Criteria)，增加后以or方式查询.
	 * @abatorgenerated
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * 创新新Criteria，如果为第一个则加入到Criteria列表。并且返回
	 * @abatorgenerated
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * 仅创新新Criteria,并且返回
	 * @abatorgenerated
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * 清除查询条件
	 * @abatorgenerated
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Abator for iBATIS. This class corresponds to the database table T_DEFAULT_OPINION
	 * @abatorgenerated  
	 */
	public static class Criteria {
		protected List criteriaWithoutValue;
		protected List criteriaWithSingleValue;
		protected List criteriaWithListValue;
		protected List criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values,
				String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andRecIdIsNull() {
			addCriterion("REC_ID is null");
			return this;
		}

		public Criteria andRecIdIsNotNull() {
			addCriterion("REC_ID is not null");
			return this;
		}

		public Criteria andRecIdEqualTo(Long value) {
			addCriterion("REC_ID =", value, "recId");
			return this;
		}

		public Criteria andRecIdNotEqualTo(Long value) {
			addCriterion("REC_ID <>", value, "recId");
			return this;
		}

		public Criteria andRecIdGreaterThan(Long value) {
			addCriterion("REC_ID >", value, "recId");
			return this;
		}

		public Criteria andRecIdGreaterThanOrEqualTo(Long value) {
			addCriterion("REC_ID >=", value, "recId");
			return this;
		}

		public Criteria andRecIdLessThan(Long value) {
			addCriterion("REC_ID <", value, "recId");
			return this;
		}

		public Criteria andRecIdLessThanOrEqualTo(Long value) {
			addCriterion("REC_ID <=", value, "recId");
			return this;
		}

		public Criteria andRecIdIn(List values) {
			addCriterion("REC_ID in", values, "recId");
			return this;
		}

		public Criteria andRecIdNotIn(List values) {
			addCriterion("REC_ID not in", values, "recId");
			return this;
		}

		public Criteria andRecIdBetween(Long value1, Long value2) {
			addCriterion("REC_ID between", value1, value2, "recId");
			return this;
		}

		public Criteria andRecIdNotBetween(Long value1, Long value2) {
			addCriterion("REC_ID not between", value1, value2, "recId");
			return this;
		}

		public Criteria andEmpIdIsNull() {
			addCriterion("EMP_ID is null");
			return this;
		}

		public Criteria andEmpIdIsNotNull() {
			addCriterion("EMP_ID is not null");
			return this;
		}

		public Criteria andEmpIdEqualTo(Long value) {
			addCriterion("EMP_ID =", value, "empId");
			return this;
		}

		public Criteria andEmpIdNotEqualTo(Long value) {
			addCriterion("EMP_ID <>", value, "empId");
			return this;
		}

		public Criteria andEmpIdGreaterThan(Long value) {
			addCriterion("EMP_ID >", value, "empId");
			return this;
		}

		public Criteria andEmpIdGreaterThanOrEqualTo(Long value) {
			addCriterion("EMP_ID >=", value, "empId");
			return this;
		}

		public Criteria andEmpIdLessThan(Long value) {
			addCriterion("EMP_ID <", value, "empId");
			return this;
		}

		public Criteria andEmpIdLessThanOrEqualTo(Long value) {
			addCriterion("EMP_ID <=", value, "empId");
			return this;
		}

		public Criteria andEmpIdIn(List values) {
			addCriterion("EMP_ID in", values, "empId");
			return this;
		}

		public Criteria andEmpIdNotIn(List values) {
			addCriterion("EMP_ID not in", values, "empId");
			return this;
		}

		public Criteria andEmpIdBetween(Long value1, Long value2) {
			addCriterion("EMP_ID between", value1, value2, "empId");
			return this;
		}

		public Criteria andEmpIdNotBetween(Long value1, Long value2) {
			addCriterion("EMP_ID not between", value1, value2, "empId");
			return this;
		}

		public Criteria andOpinionIsNull() {
			addCriterion("OPINION is null");
			return this;
		}

		public Criteria andOpinionIsNotNull() {
			addCriterion("OPINION is not null");
			return this;
		}

		public Criteria andOpinionEqualTo(String value) {
			addCriterion("OPINION =", value, "opinion");
			return this;
		}

		public Criteria andOpinionNotEqualTo(String value) {
			addCriterion("OPINION <>", value, "opinion");
			return this;
		}

		public Criteria andOpinionGreaterThan(String value) {
			addCriterion("OPINION >", value, "opinion");
			return this;
		}

		public Criteria andOpinionGreaterThanOrEqualTo(String value) {
			addCriterion("OPINION >=", value, "opinion");
			return this;
		}

		public Criteria andOpinionLessThan(String value) {
			addCriterion("OPINION <", value, "opinion");
			return this;
		}

		public Criteria andOpinionLessThanOrEqualTo(String value) {
			addCriterion("OPINION <=", value, "opinion");
			return this;
		}

		public Criteria andOpinionLike(String value) {
			addCriterion("OPINION like", value, "opinion");
			return this;
		}

		public Criteria andOpinionNotLike(String value) {
			addCriterion("OPINION not like", value, "opinion");
			return this;
		}

		public Criteria andOpinionIn(List values) {
			addCriterion("OPINION in", values, "opinion");
			return this;
		}

		public Criteria andOpinionNotIn(List values) {
			addCriterion("OPINION not in", values, "opinion");
			return this;
		}

		public Criteria andOpinionBetween(String value1, String value2) {
			addCriterion("OPINION between", value1, value2, "opinion");
			return this;
		}

		public Criteria andOpinionNotBetween(String value1, String value2) {
			addCriterion("OPINION not between", value1, value2, "opinion");
			return this;
		}
	}
}